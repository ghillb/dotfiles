vim.cmd([[runtime plugin/astronauta.vim]])

vim.g.mapleader = " "
vim.g.localleader = "\\"

local map = vim.keymap.map
local nmap = vim.keymap.nmap
local imap = vim.keymap.imap
local vmap = vim.keymap.vmap
local xmap = vim.keymap.xmap
local noremap = vim.keymap.noremap
local nnoremap = vim.keymap.nnoremap
local inoremap = vim.keymap.inoremap
local tnoremap = vim.keymap.tnoremap
local cnoremap = vim.keymap.cnoremap
local vnoremap = vim.keymap.vnoremap

map({ "<up>", "<nop>" })
map({ "<down>", "<nop>" })
map({ "<left>", "<nop>" })
map({ "<right>", "<nop>" })

noremap({ "H", "^" })
noremap({ "L", "g_" })
noremap({ "J", "mzJ`z" })
noremap({ "K", "i<cr><esc>" })
nnoremap({ "vv", "V" })
nnoremap({ "V", "vg_" })
nnoremap({ "Y", "yg_" })
noremap({ "x", '"_x' })
noremap({ "X", '"_X' })
noremap({ "j", "gj" })
noremap({ "k", "gk" })
inoremap({ "kj", "<esc>" })
inoremap({ "jk", "<esc>" })
vnoremap({ "p", '"_c<C-r><C-o>+<Esc>' })
noremap({ "n", "nzzzv" })
noremap({ "N", "Nzzzv" })
nnoremap({ "cn", "*``cgn" })
nnoremap({ "cN", "*``cgN" })
nnoremap({ "cg*", '*N"ccgn' })
vnoremap({ "*", 'y/\\V<c-r>=escape(@","/")<cr><cr>N' })
vnoremap({ "<", "<gv" })
vnoremap({ ">", ">gv" })
nnoremap({ "Q", "@q" })
nnoremap({ "d[", ":diffget //2<cr>" })
nnoremap({ "d]", ":diffget //3<cr>" })
nnoremap({ "gf", CreateOrGoToFile, silent = true })
xmap({ "s", "<Plug>VSurround" })

noremap({ "<c-c>", "ciw" })
noremap({ "<c-d>", "<c-d>zz" })
noremap({ "<c-u>", "<c-u>zz" })
noremap({ "<c-j>", "<c-e>" })
noremap({ "<c-k>", "<c-y>" })
noremap({ "<c-y>", "<c-b>" })
noremap({ "<c-l>", ':let @/=""<cr>:NvimTreeRefresh<cr>:e %<cr><c-l>' })
noremap({ "<c-s>", ":w<cr>" })
inoremap({ "<c-s>", "<c-o>:w<cr>" })
noremap({ "<c-q>", ":x<cr>" })
inoremap({ "<c-q>", "<esc>:x<cr>" })
imap({ "<c-h>", "<esc>ldba" })
imap({ "<c-w>", "<c-h>" })
imap({ "<c-l>", "<c-o>de" })
imap({ "<c-bs>", "<c-h>" })
imap({ "<c-del>", "<c-l>" })
imap({ "<c-right>", "<c-\\><c-o>w" })
imap({ "<c-left>", "<c-\\><c-o>b" })

-- terminal control mappings
nnoremap({ "<a-s-r>", ":AsyncTask file-run<cr>" })
nnoremap({ "<a-s-t>", ":AsyncTask file-test<cr>" })
nnoremap({ "<a-s-b>", ":AsyncTask file-build<cr>" })
nnoremap({ "<a-r>", ":TREPLSendLine<cr>j" })
vnoremap({ "<a-r>", ":TREPLSendSelection<cr>" })
nnoremap({ "<a-esc>", ":Ttoggle<cr><c-w>wa", silent = true })
tnoremap({ "<a-esc>", "<c-\\><c-n>:Ttoggle<cr>", silent = true })
nnoremap({ "<a-.>", ":Tnext<cr>" })
nnoremap({ "<a-,>", ":Tprevious<cr>" })
nnoremap({ "<a-\\>", NewTerminal, silent = true })
tnoremap({ "<a-.>", "<c-\\><c-n>:Tnext<cr>i" })
tnoremap({ "<a-,>", "<c-\\><c-n>:Tprevious<cr>i" })
tnoremap({ "<a-\\>", NewTerminal, silent = true })
tnoremap({ "`", "<esc>" })
tnoremap({ "<esc>", "<c-\\><c-n>" })

-- command mode mappings
cnoremap({ "w!!", "w !sudo tee > /dev/null %" })
cnoremap({ "GG", '!git -C %:p:h commit -am "--wip--" && git -C %:p:h -c push.default=current push' })

-- buffer / window / tab mappings
noremap({ "<a-h>", ":lua TmuxSwitchPane('h')<cr>", silent = true })
noremap({ "<a-j>", ":lua TmuxSwitchPane('j')<cr>", silent = true })
noremap({ "<a-k>", ":lua TmuxSwitchPane('k')<cr>", silent = true })
noremap({ "<a-l>", ":lua TmuxSwitchPane('l')<cr>", silent = true })
noremap({ "<a-e>", DrawerToggle })
noremap({ "<a-q>", CloseView })
noremap({ "<a-->", "<c-w>-" })
noremap({ "<a-=>", "<c-w>+" })
noremap({ "<a-+>", "<c-w>>" })
noremap({ "<a-_>", "<c-w><" })
noremap({ "<a-g>", ":G<cr>" })
noremap({ "<a-o>", "<c-w>o<cr>" })
noremap({ "<c-w>O", ":%bd<cr><c-o>:bd#<cr>" })
noremap({ "<c-w>t", ":$tabnew<cr>:sleep 50m<cr>:Telescope project<cr>" })
noremap({ "<c-w>q", ":tabclose<cr>" })
noremap({ "<c-w>T", ":tabonly<cr>" })
nnoremap({ "<left>", ":tabp<cr>" })
nnoremap({ "<right>", ":tabn<cr>" })
nnoremap({ "<a-left>", ":-tabmove<cr>" })
nnoremap({ "<a-right>", ":+tabmove<cr>" })

-- quickfix mappings
noremap({ "[q", ":QFPrev<CR>" })
noremap({ "]q", ":QFNext<CR>" })
noremap({ "[l", ":LLPrev<CR>" })
noremap({ "]l", ":LLNext<CR>" })

-- leader mappings
nnoremap({ "<leader><leader>", "a<space><esc>" })
nnoremap({ "<leader>bn", ":bnext<cr>" })
nnoremap({ "<leader>bp", ":bprevious<cr>" })
nnoremap({ "<leader>bc", ":enew<cr>" })
nnoremap({ "<leader>bd", ":bd<cr>" })
nnoremap({ "<leader>bb", ":buffers<cr>" })
nnoremap({ "<leader>bo", ":w<bar>%bd<bar>e#<bar>bd#<cr>" })
nnoremap({ "<leader>tg", ToggleGutter })
nnoremap({ "<leader>tz", ":ZenMode<cr>", silent = true })
nnoremap({ "<leader>tw", ":Twilight<cr>", silent = true })
nnoremap({ "<leader>tc", ":Codi!!<cr>" })
nnoremap({ "<leader>td", ":diffthis<cr>" })
nnoremap({ "<leader>ti", ":IndentBlanklineToggle<cr>"})
nnoremap({ "<leader>ts", ":setlocal spell!<cr>" })
nnoremap({ "<leader>ty", ":Alpha<cr>" })
nnoremap({ "<leader>ta", ":AerialToggle<cr>" })
nnoremap({ "<leader>tu", ":UndotreeToggle<cr>" })
nnoremap({ "<leader>tp", ":set paste!<cr>" })
nnoremap({ "<leader>tm", ":Glow<cr><c-w>\\| <c-w>_" })
nnoremap({ "<leader>ttx", "<cmd>TroubleToggle<cr>" })
nnoremap({ "<leader>ttw", "<cmd>TroubleToggle workspace_diagnostics<cr>" })
nnoremap({ "<leader>ttd", "<cmd>TroubleToggle document_diagnostics<cr>" })
nnoremap({ "<leader>ttq", "<cmd>TroubleToggle quickfix<cr>" })
nnoremap({ "<leader>ttl", "<cmd>TroubleToggle loclist<cr>" })
nnoremap({ "<leader>ttt", "<cmd>TodoTrouble<cr>" })
nnoremap({ "<leader>se", ":VsnipOpen<cr>" })
nnoremap({ "<leader>se", ":VsnipYank vs_ <bar> VsnipOpenVsplit" })
nnoremap({ "<leader>sy", ":VsnipYank" })
nnoremap({ "<leader>ss", '<cmd>lua require("persistence").load()<cr>' })
nnoremap({ "<leader>sl", '<cmd>lua require("persistence").load({ last = true })<cr>' })
nnoremap({ "<leader>sq", '<cmd>lua require("persistence").stop()<cr>' })
nnoremap({ "<leader>zi", "<c-w>_<bar><c-w>\\|" })
nnoremap({ "<leader>zo", "<c-w>=" })
nnoremap({ "<leader>e", ":NnnPicker %:p:h<cr>", silent = true })
nnoremap({ "<leader>gg", ":G<cr>" })
nnoremap({ "<leader>gw", ":Gwrite<cr>" })
nnoremap({ "<leader>gr", ":G restore --source %<left><left><space>" })
nnoremap({ "<leader>gd", ":DiffviewOpen" })
nnoremap({ "<leader>gf", ":DiffviewFileHistory<cr>" })
nnoremap({ "<leader>gmt", ":Gvdiffsplit!<cr>" })
nnoremap({ "<leader>gcc", ":G checkout %" })
nnoremap({ "<leader>gcb", ":G checkout -b" })
nnoremap({ "<leader>glo", ":GV<cr>" })
nnoremap({ "<leader>gll", ":GV!<cr>" })
nnoremap({ "<leader>gpl", ":G -c pull.default=current pull<cr>" })
nnoremap({ "<leader>gps", ":G -c push.default=current push<cr>" })
nnoremap({ "<leader>gss", ":G stash<cr>" })
nnoremap({ "<leader>gsp", ":G stash pop -q<cr>" })
nnoremap({ "<leader>ga", ":G add -p<cr>" })
nnoremap({ "<leader>gb", ":Git blame<cr>" })
nnoremap({ "<leader>id", "i<c-r>=expand('%:p:h').'/'<cr><esc>" })
nnoremap({ "<leader>itd", '"=strftime("%Y-%m-%d")<cr>P' })
nnoremap({ "<leader>itt", '"=strftime("%H:%M:%S")<cr>P' })
nnoremap({ "<leader>itm", '"=strftime("%Y-%m-%d \\/ %H:%M:%S")<cr>P' })
nnoremap({ "<leader>ypd", "yap<S-}>p" })
nnoremap({ "<leader>ypu", "yap<S-{>p" })
nnoremap({ "<leader>p", "o<esc>p" })
nnoremap({ "<leader>P", "O<esc>P" })
nnoremap({ "<leader>o", "o<esc>" })
nnoremap({ "<leader>O", "O<esc>" })
nnoremap({ "<leader>v", "ggVG" })
nnoremap({ "<leader>*", "*:%s//" })

-- localleader mappings
nnoremap({ "<localleader><cr>", ":lua SetRoot('git_worktree')<cr>", silent = true })
nnoremap({ "<localleader><bs>", ":lua SetRoot('parent_dir')<cr>", silent = true })
nnoremap({ "<localleader>/", ":lua SetRoot('current_dir')<cr>", silent = true })
nnoremap({
  "<localleader><localleader>",
  ':chdir $VIM_ROOT<cr><bar> :echo "back to root -> " . $VIM_ROOT<cr>',
  silent = true,
})
nnoremap({ "<localleader>sr", ":%s///gc<left><left><left><left>" })
nnoremap({ "<localleader>sq", ":vim// **/*<left><left><left><left><left><left>" })
nnoremap({ "<localleader>sl", ":lv// %<left><left><left>" })
nnoremap({ "<localleader>q", "<cmd>QFToggle!<CR>", silent = true })
nnoremap({ "<localleader>l", "<cmd>LLToggle!<CR>", silent = true })
nnoremap({ "<localleader>dw", ":%s/\\s\\+$//e<cr>" })
nnoremap({ "<localleader>ve", ":e $NVIM_CONFIG/init.lua<cr>" })
nnoremap({ "<localleader>vr", ":so $MYVIMRC<cr>" })
nnoremap({ "<localleader>pu", ":source $MYVIMRC<cr> :PackerSync<cr>" })
nnoremap({ "<localleader>ps", ":source $MYVIMRC<cr> :PackerStatus<cr>" })

-- lsp mappings
nnoremap({ "gd", vim.lsp.buf.definition })
nnoremap({ "gD", vim.lsp.buf.declaration })
nnoremap({ "gr", vim.lsp.buf.references })
nnoremap({ "gi", vim.lsp.buf.implementation })
nnoremap({ "gh", vim.lsp.buf.hover })
nnoremap({ "gs", vim.lsp.buf.signature_help })
nnoremap({ "g*", vim.lsp.buf.rename })
nnoremap({ "]d", vim.diagnostic.goto_next })
nnoremap({ "[d", vim.diagnostic.goto_prev })
nnoremap({ "gF", vim.lsp.buf.formatting })
nnoremap({ "<a-space>", vim.diagnostic.open_float })
nnoremap({ "<a-cr>", "<cmd>Telescope lsp_code_actions<cr>" })
nnoremap({ "gR", "<cmd>TroubleToggle lsp_references<cr>" })
